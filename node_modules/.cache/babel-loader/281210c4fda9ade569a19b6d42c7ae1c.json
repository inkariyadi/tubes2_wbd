{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/inkariyadi/Documents/GitHub/willy-wangky-factory/src/components/dataCoklat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Axios from 'axios';\nimport XMLParser from 'react-xml-parser';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500\n  }\n}); // function createData(name, calories, fat, carbs, protein) {\n//   return { name, calories, fat, carbs, protein };\n// }\n// const rows = [\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n//   createData('Eclair', 262, 16.0, 24, 6.0),\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\n// ];\n\nexport default function DataCoklat() {\n  _s();\n\n  const classes = useStyles();\n  const [coklat, setCoklat] = useState([]);\n  useEffect(() => {\n    soapGetCoklat(); // Axios.get(\"http://localhost:3007/api/datacoklat\").then((response)=>{\n    //   setCoklat(response.data);\n    // });\n  }, []);\n\n  const soapGetCoklat = () => {\n    const config = {\n      headers: {\n        'Content-Type': 'text/xml;charset=utf-8'\n      }\n    };\n    const body = '<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cod=\"http://codejava.net/\">' + '<soapenv:Header/>' + '<soapenv:Body>' + '<cod:getCoklatDatabase/>' + '</soapenv:Body>' + '</soapenv:Envelope>';\n    Axios.post(\"http://localhost:8080/wwfactory/ws/factory?wsdl\", body, config).then(res => res.data).then(data => new XMLParser().parseFromString(data)).then(xml => {\n      var hasil_awal = xml.getElementsByTagName('return');\n      var hasil = hasil_awal[0].value;\n      var hasil_parse = JSON.parse(hasil);\n      console.log(hasil_parse);\n      setCoklat(hasil_parse);\n      console.log(coklat); // setSaldo(saldo[0].value);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Coklat Pabrik\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Nama Coklat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Stok Coklat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: coklat.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: row.nama_coklat\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.jumlah\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, row.nama_coklat, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n}\n\n_s(DataCoklat, \"7VJ8b7Ljkfk8BSSiu0O6zDxKOHY=\", false, function () {\n  return [useStyles];\n});\n\n_c = DataCoklat;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataCoklat\");","map":{"version":3,"sources":["/Users/inkariyadi/Documents/GitHub/willy-wangky-factory/src/components/dataCoklat.js"],"names":["React","useState","useEffect","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Axios","XMLParser","useStyles","table","minWidth","DataCoklat","classes","coklat","setCoklat","soapGetCoklat","config","headers","body","post","then","res","data","parseFromString","xml","hasil_awal","getElementsByTagName","hasil","value","hasil_parse","JSON","parse","console","log","map","row","nama_coklat","jumlah"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Axios from 'axios';\nimport XMLParser from 'react-xml-parser';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\n// function createData(name, calories, fat, carbs, protein) {\n//   return { name, calories, fat, carbs, protein };\n// }\n\n// const rows = [\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n//   createData('Eclair', 262, 16.0, 24, 6.0),\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\n// ];\n\nexport default function DataCoklat() {\n  const classes = useStyles();\n  const [coklat,setCoklat] = useState([]);\n  useEffect(()=>{\n    soapGetCoklat();\n    // Axios.get(\"http://localhost:3007/api/datacoklat\").then((response)=>{\n    //   setCoklat(response.data);\n    // });\n  },[]);\n  const soapGetCoklat =() =>{\n   \n    const config = {headers:{'Content-Type':'text/xml;charset=utf-8'}};\n    const body = '<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cod=\"http://codejava.net/\">'+\n                    '<soapenv:Header/>' +\n                    '<soapenv:Body>' + \n                      '<cod:getCoklatDatabase/>' + \n                    '</soapenv:Body>' +\n                '</soapenv:Envelope>';\n    Axios.post(\"http://localhost:8080/wwfactory/ws/factory?wsdl\",body,config)\n    .then(res=>res.data)\n    .then(data=> new XMLParser().parseFromString(data))\n    .then(xml=>{\n        \n        var hasil_awal = xml.getElementsByTagName('return');\n        var hasil = hasil_awal[0].value;\n        var hasil_parse = JSON.parse(hasil);\n        console.log(hasil_parse);\n        setCoklat(hasil_parse);\n        console.log(coklat);\n        // setSaldo(saldo[0].value);\n    })\n    ;\n  }\n\n  return (\n      <div>\n        <h1>Data Coklat Pabrik</h1>\n        <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n            <TableRow>\n                <TableCell>Nama Coklat</TableCell>\n                <TableCell >Stok Coklat</TableCell>\n            </TableRow>\n            </TableHead>\n            <TableBody>\n            {coklat.map((row) => (\n                <TableRow key={row.nama_coklat}>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.nama_coklat}\n                </TableCell>\n                <TableCell>{row.jumlah}</TableCell>\n                {/* <TableCell align=\"right\">{row.jumlah}</TableCell> */}\n                </TableRow>\n            ))}\n            </TableBody>\n        </Table>\n        </TableContainer>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}